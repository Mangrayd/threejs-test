'use strict';

/*Class APP */

/* CONSTRUCTOR */
var App, cApp;

cApp = function() {
  this.cube = new THREE.Object3D();
  this.cubeNum = 10000;
  this.cubeSide = 10;
  this.cubeCoords = {
    1: {
      1: {
        x: this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: -this.cubeSide / 2
      },
      2: {
        x: this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: this.cubeSide / 2
      }
    },
    2: {
      1: {
        x: this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: -this.cubeSide / 2
      },
      2: {
        x: -this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: -this.cubeSide / 2
      }
    },
    3: {
      1: {
        x: this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: -this.cubeSide / 2
      },
      2: {
        x: this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: -this.cubeSide / 2
      }
    },
    4: {
      1: {
        x: -this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: -this.cubeSide / 2
      },
      2: {
        x: this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: -this.cubeSide / 2
      }
    },
    5: {
      1: {
        x: -this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: -this.cubeSide / 2
      },
      2: {
        x: -this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: -this.cubeSide / 2
      }
    },
    6: {
      1: {
        x: -this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: -this.cubeSide / 2
      },
      2: {
        x: -this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: this.cubeSide / 2
      }
    },
    7: {
      1: {
        x: -this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: this.cubeSide / 2
      },
      2: {
        x: this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: this.cubeSide / 2
      }
    },
    8: {
      1: {
        x: -this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: this.cubeSide / 2
      },
      2: {
        x: -this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: this.cubeSide / 2
      }
    },
    9: {
      1: {
        x: -this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: this.cubeSide / 2
      },
      2: {
        x: -this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: -this.cubeSide / 2
      }
    },
    10: {
      1: {
        x: this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: this.cubeSide / 2
      },
      2: {
        x: -this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: this.cubeSide / 2
      }
    },
    11: {
      1: {
        x: this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: this.cubeSide / 2
      },
      2: {
        x: this.cubeSide / 2,
        y: this.cubeSide / 2,
        z: this.cubeSide / 2
      }
    },
    12: {
      1: {
        x: this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: this.cubeSide / 2
      },
      2: {
        x: this.cubeSide / 2,
        y: -this.cubeSide / 2,
        z: -this.cubeSide / 2
      }
    }
  };
  this.cubeClone = void 0;
  this.sphereRadius = 1;
  this.sphereClone = void 0;
  this.spheres = [];
  this.spheresCoords = {
    1: {
      x: -this.cubeSide / 2,
      y: -this.cubeSide / 2,
      z: -this.cubeSide / 2
    },
    2: {
      x: +this.cubeSide / 2,
      y: +this.cubeSide / 2,
      z: +this.cubeSide / 2
    },
    3: {
      x: +this.cubeSide / 2,
      y: -this.cubeSide / 2,
      z: -this.cubeSide / 2
    },
    4: {
      x: -this.cubeSide / 2,
      y: +this.cubeSide / 2,
      z: -this.cubeSide / 2
    },
    5: {
      x: -this.cubeSide / 2,
      y: -this.cubeSide / 2,
      z: +this.cubeSide / 2
    },
    6: {
      x: +this.cubeSide / 2,
      y: +this.cubeSide / 2,
      z: -this.cubeSide / 2
    },
    7: {
      x: -this.cubeSide / 2,
      y: +this.cubeSide / 2,
      z: +this.cubeSide / 2
    },
    8: {
      x: +this.cubeSide / 2,
      y: -this.cubeSide / 2,
      z: +this.cubeSide / 2
    }
  };
  this.arrSpheres = [];
  this.arrLines = [];
  this.scene = void 0;
  this.camera = void 0;
  this.renderer = void 0;
  this.orbit = void 0;
  this.plane = void 0;
  this.selectedObject = void 0;
  this.projector = new THREE.Projector();
  this.offset = new THREE.Vector3();
};


/* INITILIZATIONS */

cApp.prototype.PlaneInit = function() {
  this.plane = new THREE.Mesh(new THREE.PlaneGeometry(2000, 2000, 18, 18), new THREE.MeshBasicMaterial());
  this.plane.visible = false;
  this.scene.add(this.plane);
};

cApp.prototype.CameraInit = function() {
  this.camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 1000);
  this.camera.position.x = 100;
  this.camera.position.y = 90;
  this.camera.position.z = 90;
  this.camera.lookAt(this.scene.position);
};

cApp.prototype.RenderInit = function() {
  this.renderer = new THREE.WebGLRenderer();
  this.renderer.setClearColor(new THREE.Color(0xEEEEEE));
  this.renderer.setSize(window.innerWidth, window.innerHeight);
};

cApp.prototype.Rendering = function() {
  this.renderer.render(this.scene, this.camera);
  this.cube.position.needsUpdate = true;
  this.orbit.update();
  requestAnimationFrame(this.Rendering.bind(this));
};


/* EVENTS */

cApp.prototype.MouseDownEvent = function(event) {
  var i, intersects, j, mouse_x, mouse_y, position, raycaster, vector;
  mouse_x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse_y = -(event.clientY / window.innerHeight) * 2 + 1;

  /* convert mouse position to 3D */
  vector = new THREE.Vector3(mouse_x, mouse_y, 0.5);
  vector.unproject(this.camera);

  /* define the intersects */
  raycaster = new THREE.Raycaster(this.camera.position, vector.sub(this.camera.position).normalize());
  intersects = raycaster.intersectObjects(this.arrSpheres);

  /* if intersects */
  if (intersects.length > 0) {
    this.orbit.enabled = false;
    this.selectedObject = intersects[0].object;
    position = this.selectedObject.position;
    i = 0;
    while (i < this.arrLines.length) {
      if (this.arrLines[i].parent.uuid === this.selectedObject.parent.uuid) {
        j = 0;
        while (j < 2) {
          if (position.x === this.arrLines[i].geometry.vertices[j].x && position.y === this.arrLines[i].geometry.vertices[j].y && position.z === this.arrLines[i].geometry.vertices[j].z) {
            this.arrLines[i].material = this.selectedObject.material;
          }
          j++;
        }
      }
      i++;
    }
  }
};

cApp.prototype.MouseUpEvent = function() {
  this.orbit.enabled = true;
  this.selectedObject = null;
};

cApp.prototype.onWindowResize = function() {
  this.camera.aspect = window.innerWidth / window.innerHeight;
  this.camera.updateProjectionMatrix();
  this.renderer.setSize(window.innerWidth, window.innerHeight);
};


/* CREATE OBJECTS */

cApp.prototype.CreateCube = function() {
  var i, j;
  i = 1;
  while (i <= 12) {
    this.CreateCubeLines(i);
    i++;
  }
  j = 1;
  while (j <= 8) {
    this.CreateCubeSpheres(j);
    j++;
  }
};

cApp.prototype.CreateCubeLines = function(i) {
  var line, lineCoords, lineGeometry, lineMaterial;
  lineCoords = this.cubeCoords[i];
  lineGeometry = new THREE.Geometry();
  lineMaterial = new THREE.LineBasicMaterial({
    color: 0x000000
  });
  lineGeometry.vertices.push(new THREE.Vector3(lineCoords[1].x, lineCoords[1].y, lineCoords[1].z), new THREE.Vector3(lineCoords[2].x, lineCoords[2].y, lineCoords[2].z));
  line = new THREE.Line(lineGeometry, lineMaterial);
  this.cube.add(line);
};

cApp.prototype.CreateCubeSpheres = function(j) {
  var sphere, sphereGeometry, sphereMaterial;
  sphereGeometry = new THREE.SphereGeometry(this.sphereRadius);
  sphereMaterial = new THREE.MeshBasicMaterial({
    color: Math.random() * 0xffffff
  });
  sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
  sphere.position.x = this.spheresCoords[j].x;
  sphere.position.y = this.spheresCoords[j].y;
  sphere.position.z = this.spheresCoords[j].z;
  this.cube.add(sphere);
};

cApp.prototype.AddCube = function() {
  var i, j;
  this.cubeClone = this.cube.clone();
  this.cubeClone.position.x = (Math.random() * Math.sqrt(this.cubeNum) * this.cubeSide) - (Math.sqrt(this.cubeNum) * this.cubeSide) / 2;
  this.cubeClone.position.y = (Math.random() * Math.sqrt(this.cubeNum) * this.cubeSide) - (Math.sqrt(this.cubeNum) * this.cubeSide) / 2;
  this.cubeClone.position.z = (Math.random() * Math.sqrt(this.cubeNum) * this.cubeSide) - (Math.sqrt(this.cubeNum) * this.cubeSide) / 2;
  j = 0;
  while (j <= 11) {
    this.arrLines.push(this.cubeClone.children[j]);
    j++;
  }
  i = 12;
  while (i <= 19) {
    this.arrSpheres.push(this.cubeClone.children[i]);
    i++;
  }
  this.scene.add(this.cubeClone);
};

cApp.prototype.Run = function() {
  var axes, i, self;
  console.info('Project is running!');
  self = this;
  this.scene = new THREE.Scene();
  this.PlaneInit();
  this.CreateCube();
  i = 0;
  while (i < this.cubeNum) {
    this.AddCube();
    i++;
  }
  this.CameraInit();
  this.RenderInit();
  axes = new THREE.AxisHelper(100);
  this.scene.add(axes);
  window.addEventListener('resize', App.onWindowResize.bind(self), false);
  document.getElementById("webgl").appendChild(this.renderer.domElement);
  this.orbit = new THREE.OrbitControls(this.camera);
  this.Rendering();
};


/* APP start */

App = new cApp();

window.onload = App.Run();

document.onmousedown = function(event) {
  App.MouseDownEvent(event);
};

document.onmouseup = function() {
  App.MouseUpEvent();
};

//# sourceMappingURL=data:application/json;base64,

'use strict';

/*Class APP */
var App, arrLines, arrPoints, cApp, cCube, camera, createBox, createElements, createPoints, init, length, num, offset, onWindowResize, orbit, plane, projector, radius, render, renderer, scene, selectedObject, x, y, z;

cApp = function() {
  this.cubeNum = 500;
  this.cubeSide = 10;
  this.sphereRadius = 10;
};

cApp.prototype.GetPropValue = function(prop) {
  return this[prop];
};

cApp.prototype.SetPropValue = function(prop, value) {
  this[prop] = value;
};

cApp.prototype.Run = function() {
  var Cube, i, results;
  i = 0;
  results = [];
  while (i < this.cubeNum) {
    Cube = new cCube();
    Cube.Create(0, 0, 0);
    console.log(Cube.x);
    console.log(Cube.y);
    console.log(Cube.z);
    results.push(i++);
  }
  return results;
};


/*Class Cube */

cCube = function() {
  this.x = void 0;
  this.y = void 0;
  this.z = void 0;
};

cCube.prototype.Create = function(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
  console.log('created');
};

App = new cApp();

scene = void 0;

camera = void 0;

renderer = void 0;

num = 10;

length = 10;

radius = 0.5;

x = y = z = void 0;

arrPoints = [];

arrLines = [];

orbit = void 0;

plane = void 0;

selectedObject = void 0;

projector = new THREE.Projector();

offset = new THREE.Vector3();

init = function() {
  var axes, cube, cubeGeometry, cubeMaterial;
  scene = new THREE.Scene();
  plane = new THREE.Mesh(new THREE.PlaneGeometry(2000, 2000, 18, 18), new THREE.MeshBasicMaterial());
  plane.visible = false;
  scene.add(plane);
  cubeGeometry = new THREE.BoxGeometry(10, 10, 10);
  cubeMaterial = new THREE.MeshLambertMaterial({});
  cubeMaterial.transparent = true;
  cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
  cube.visible = false;
  console.log(cube);
  scene.add(cube);
  camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.x = 100;
  camera.position.y = 90;
  camera.position.z = 90;
  camera.lookAt(scene.position);
  renderer = new THREE.WebGLRenderer();
  renderer.setClearColor(new THREE.Color(0xEEEEEE));
  renderer.setSize(window.innerWidth, window.innerHeight);
  axes = new THREE.AxisHelper(100);
  scene.add(axes);
  document.getElementById("WebGL-output").appendChild(renderer.domElement);
  window.addEventListener('resize', onWindowResize, false);
  orbit = new THREE.OrbitControls(camera);
  render();
};

createElements = function() {
  var i, j, k;
  k = 1;
  while (k <= num) {

    /*
    		x = Math.random() * (length + num + 30)
    		y = Math.random() * (length + num + 30)
    		z = Math.random() * (length + num + 30)
     */
    x = 0;
    y = 0;
    z = 0;
    createBox(x, y, z);
    createBox(x, y, z + (length * k * 1.5));
    createBox(x, y, -(z + (length * k * 1.5)));

    /*createBox(-x, -y, -z)
    		createBox(x, -y, -z)
    		createBox(-x, y, -z)
    		createBox(-x, -y, z)
    
    		createBox(x, y, -z)
    		createBox(x, -y, z)
    		createBox(-x, y, z)
     */
    k++;
  }
  i = 0;
  while (i < arrLines.length) {
    scene.add(arrLines[i]);
    i++;
  }
  j = 0;
  while (j < arrPoints.length) {
    scene.add(arrPoints[j]);
    j++;
  }
};

createBox = function(x, y, z) {
  var i, line, lineCoords, lineGeometries, lineGeometry, lineMaterial;
  lineMaterial = new THREE.LineBasicMaterial({
    color: 0x000000
  });
  lineGeometries = {
    1: {
      1: {
        x: x + length / 2,
        y: y + length / 2,
        z: z - length / 2
      },
      2: {
        x: x + length / 2,
        y: y + length / 2,
        z: z + length / 2
      }
    },
    2: {
      1: {
        x: x + length / 2,
        y: y + length / 2,
        z: z - length / 2
      },
      2: {
        x: x - length / 2,
        y: y + length / 2,
        z: z - length / 2
      }
    },
    3: {
      1: {
        x: x + length / 2,
        y: y + length / 2,
        z: z - length / 2
      },
      2: {
        x: x + length / 2,
        y: y - length / 2,
        z: z - length / 2
      }
    },
    4: {
      1: {
        x: x - length / 2,
        y: y - length / 2,
        z: z - length / 2
      },
      2: {
        x: x + length / 2,
        y: y - length / 2,
        z: z - length / 2
      }
    },
    5: {
      1: {
        x: x - length / 2,
        y: y - length / 2,
        z: z - length / 2
      },
      2: {
        x: x - length / 2,
        y: y + length / 2,
        z: z - length / 2
      }
    },
    6: {
      1: {
        x: x - length / 2,
        y: y - length / 2,
        z: z - length / 2
      },
      2: {
        x: x - length / 2,
        y: y - length / 2,
        z: z + length / 2
      }
    },
    7: {
      1: {
        x: x - length / 2,
        y: y + length / 2,
        z: z + length / 2
      },
      2: {
        x: x + length / 2,
        y: y + length / 2,
        z: z + length / 2
      }
    },
    8: {
      1: {
        x: x - length / 2,
        y: y + length / 2,
        z: z + length / 2
      },
      2: {
        x: x - length / 2,
        y: y - length / 2,
        z: z + length / 2
      }
    },
    9: {
      1: {
        x: x - length / 2,
        y: y + length / 2,
        z: z + length / 2
      },
      2: {
        x: x - length / 2,
        y: y + length / 2,
        z: z - length / 2
      }
    },
    10: {
      1: {
        x: x + length / 2,
        y: y - length / 2,
        z: z + length / 2
      },
      2: {
        x: x - length / 2,
        y: y - length / 2,
        z: z + length / 2
      }
    },
    11: {
      1: {
        x: x + length / 2,
        y: y - length / 2,
        z: z + length / 2
      },
      2: {
        x: x + length / 2,
        y: y + length / 2,
        z: z + length / 2
      }
    },
    12: {
      1: {
        x: x + length / 2,
        y: y - length / 2,
        z: z + length / 2
      },
      2: {
        x: x + length / 2,
        y: y - length / 2,
        z: z - length / 2
      }
    }
  };
  i = 1;
  while (i <= 12) {
    lineCoords = lineGeometries[i];
    lineGeometry = new THREE.Geometry();
    lineGeometry.vertices.push(new THREE.Vector3(lineCoords[1].x, lineCoords[1].y, lineCoords[1].z), new THREE.Vector3(lineCoords[2].x, lineCoords[2].y, lineCoords[2].z));
    line = new THREE.Line(lineGeometry, lineMaterial);
    arrLines.push(line);
    i++;
  }
  return createPoints(x, y, z);
};

createPoints = function(x, y, z) {
  var i, objPoint, point, pointGeometry, pointMaterial;
  objPoint = {
    1: {
      x: x - length / 2,
      y: y - length / 2,
      z: z - length / 2,
      color: 0xc0f515
    },
    2: {
      x: x + length / 2,
      y: y + length / 2,
      z: z + length / 2,
      color: 0x8d6796
    },
    3: {
      x: x + length / 2,
      y: y - length / 2,
      z: z - length / 2,
      color: 0xdd1600
    },
    4: {
      x: x - length / 2,
      y: y + length / 2,
      z: z - length / 2,
      color: 0x1c1aa9
    },
    5: {
      x: x - length / 2,
      y: y - length / 2,
      z: z + length / 2,
      color: 0x6e400a
    },
    6: {
      x: x + length / 2,
      y: y + length / 2,
      z: z - length / 2,
      color: 0x5f2c4f
    },
    7: {
      x: x - length / 2,
      y: y + length / 2,
      z: z + length / 2,
      color: 0x82d481
    },
    8: {
      x: x + length / 2,
      y: y - length / 2,
      z: z + length / 2,
      color: 0x46173d
    }
  };
  pointGeometry = new THREE.SphereGeometry(radius);
  i = 1;
  while (i <= 8) {
    pointMaterial = new THREE.MeshBasicMaterial({
      color: objPoint[i].color
    });
    point = new THREE.Mesh(pointGeometry, pointMaterial);
    point.position.x = objPoint[i].x;
    point.position.y = objPoint[i].y;
    point.position.z = objPoint[i].z;
    arrPoints.push(point);
    i++;
  }
};

document.onmousedown = function(event) {
  var i, intersects, j, mouse_x, mouse_y, position, raycaster, vector;
  mouse_x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse_y = -(event.clientY / window.innerHeight) * 2 + 1;
  vector = new THREE.Vector3(mouse_x, mouse_y, 0.5);
  vector.unproject(camera);
  raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());
  intersects = raycaster.intersectObjects(arrPoints);
  if (intersects.length > 0) {
    orbit.enabled = false;
    selectedObject = intersects[0].object;
    position = selectedObject.position;
    i = 0;
    while (i < arrLines.length) {
      j = 0;
      while (j < 2) {
        if (position.x === arrLines[i].geometry.vertices[j].x && position.y === arrLines[i].geometry.vertices[j].y && position.z === arrLines[i].geometry.vertices[j].z) {
          arrLines[i].material = selectedObject.material;
        }
        j++;
      }
      i++;
    }
  }
};

document.onmouseup = function() {
  orbit.enabled = true;
  return selectedObject = null;
};

render = function() {
  renderer.render(scene, camera);
  orbit.update();
  requestAnimationFrame(render);
};

onWindowResize = function() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
};

window.onload = init;

//# sourceMappingURL=data:application/json;base64,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R0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQUZjO0lBR2hCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQUhjO0lBSWhCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQUpjO0lBTWhCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQU5jO0lBT2hCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQVBjO0lBUWhCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQVJjO0lBVWhCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQVZjO0lBV2hCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQVhjO0lBWWhCLENBQUEsRUFBRTtNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThDLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFoRDtLQVpjO0lBY2hCLEVBQUEsRUFBRztNQUFFLENBQUEsRUFBRTtRQUFDLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQVo7UUFBYyxDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF6QjtRQUEyQixDQUFBLEVBQUUsQ0FBQSxHQUFFLE1BQUEsR0FBTyxDQUF0QztPQUFKO01BQThD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QUFjLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXpCO01BQTJCLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXRDO01BQXdDLEtBQUEsRUFBTSxRQUE5QztLQUhPO0lBSVYsQ0FBQSxFQUFHO01BQUMsQ0FBQSxFQUFFLENBQUEsR0FBRSxNQUFBLEdBQU8sQ0FBWjtNQUFjLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXpCO01BQTJCLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXRDO01BQXdDLEtBQUEsRUFBTSxRQUE5QztLQUpPO0lBS1YsQ0FBQSxFQUFHO01BQUMsQ0FBQSxFQUFFLENBQUEsR0FBRSxNQUFBLEdBQU8sQ0FBWjtNQUFjLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXpCO01BQTJCLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXRDO01BQXdDLEtBQUEsRUFBTSxRQUE5QztLQUxPO0lBTVYsQ0FBQSxFQUFHO01BQUMsQ0FBQSxFQUFFLENBQUEsR0FBRSxNQUFBLEdBQU8sQ0FBWjtNQUFjLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXpCO01BQTJCLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXRDO01BQXdDLEtBQUEsRUFBTSxRQUE5QztLQU5PO0lBT1YsQ0FBQSxFQUFHO01BQUMsQ0FBQSxFQUFFLENBQUEsR0FBRSxNQUFBLEdBQU8sQ0FBWjtNQUFjLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXpCO01BQTJCLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXRDO01BQXdDLEtBQUEsRUFBTSxRQUE5QztLQVBPO0lBUVYsQ0FBQSxFQUFHO01BQUMsQ0FBQSxFQUFFLENBQUEsR0FBRSxNQUFBLEdBQU8sQ0FBWjtNQUFjLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFPLENBQXpCO01BQTJCLENBQUEsRUFBRSxDQUFBLEdBQUUsTUFBQSxHQUFP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QjtBQUhROztBQU1ULGNBQUEsR0FBaUIsU0FBQTtFQUNoQixNQUFNLENBQUMsTUFBUCxHQUFnQixNQUFNLENBQUMsVUFBUCxHQUFvQixNQUFNLENBQUM7RUFDM0MsTUFBTSxDQUFDLHNCQUFQLENBQUE7RUFDQSxRQUFRLENBQUMsT0FBVCxDQUFrQixNQUFNLENBQUMsVUFBekIsRUFBcUMsTUFBTSxDQUFDLFdBQTVDO0FBSGdCOztBQU1qQixNQUFNLENBQUMsTUFBUCxHQUFnQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG4jIyNDbGFzcyBBUFAjIyNcclxuY0FwcCA9ICgpIC0+XHJcblx0dGhpcy5jdWJlTnVtID0gNTAwXHJcblx0dGhpcy5jdWJlU2lkZSA9IDEwXHJcblx0dGhpcy5zcGhlcmVSYWRpdXMgPSAxMFxyXG5cdHJldHVyblxyXG5jQXBwLnByb3RvdHlwZS5HZXRQcm9wVmFsdWUgPSAocHJvcCkgLT5cclxuXHRyZXR1cm4gdGhpc1twcm9wXVxyXG5jQXBwLnByb3RvdHlwZS5TZXRQcm9wVmFsdWUgPSAocHJvcCx2YWx1ZSkgLT5cclxuXHR0aGlzW3Byb3BdID0gdmFsdWVcclxuXHRyZXR1cm5cclxuY0FwcC5wcm90b3R5cGUuUnVuID0gKCkgLT5cclxuXHRpID0gMFxyXG5cdHdoaWxlIGkgPCB0aGlzLmN1YmVOdW1cclxuXHRcdEN1YmUgPSBuZXcgY0N1YmUoKVxyXG5cdFx0Q3ViZS5DcmVhdGUoMCwwLDApXHJcblx0XHRjb25zb2xlLmxvZyBDdWJlLnhcclxuXHRcdGNvbnNvbGUubG9nIEN1YmUueVxyXG5cdFx0Y29uc29sZS5sb2cgQ3ViZS56XHJcblx0XHRpKytcclxuXHJcbiMjI0NsYXNzIEN1YmUjIyNcclxuY0N1YmUgPSAoKSAtPlxyXG5cdHRoaXMueCA9IHVuZGVmaW5lZFxyXG5cdHRoaXMueSA9IHVuZGVmaW5lZFxyXG5cdHRoaXMueiA9IHVuZGVmaW5lZFxyXG5cdHJldHVyblxyXG5jQ3ViZS5wcm90b3R5cGUuQ3JlYXRlID0gKHgseSx6KSAtPlxyXG5cdHRoaXMueCA9IHhcclxuXHR0aGlzLnkgPSB5XHJcblx0dGhpcy56ID0gelxyXG5cdGNvbnNvbGUubG9nICdjcmVhdGVkJ1xyXG5cdHJldHVyblxyXG5BcHAgPSBuZXcgY0FwcCgpXHJcbiMjd2luZG93Lm9ubG9hZCA9IEFwcC5SdW4oKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuc2NlbmUgPSB1bmRlZmluZWRcclxuY2FtZXJhID0gdW5kZWZpbmVkXHJcbnJlbmRlcmVyID0gdW5kZWZpbmVkXHJcblxyXG5udW0gPSAxMFxyXG5sZW5ndGggPSAxMFxyXG5yYWRpdXMgPSAwLjVcclxuXHJcblxyXG54ID0geSA9IHogPSB1bmRlZmluZWRcclxuXHJcbmFyclBvaW50cyA9IFtdXHJcbmFyckxpbmVzID0gW11cclxuXHJcbm9yYml0ID0gdW5kZWZpbmVkXHJcbnBsYW5lID0gdW5kZWZpbmVkXHJcbnNlbGVjdGVkT2JqZWN0ID0gdW5kZWZpbmVkXHJcblxyXG5wcm9qZWN0b3IgPSBuZXcgVEhSRUUuUHJvamVjdG9yKClcclxub2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKVxyXG5cclxuaW5pdCA9ICgpLT5cclxuXHJcblx0c2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxyXG5cclxuXHRwbGFuZSA9IG5ldyBUSFJFRS5NZXNoKCBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSggMjAwMCwgMjAwMCwgMTgsIDE4ICksIG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgpIClcclxuXHRwbGFuZS52aXNpYmxlID0gZmFsc2VcclxuXHRzY2VuZS5hZGQoIHBsYW5lIClcclxuXHJcblxyXG5cdGN1YmVHZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxMCwgMTAsIDEwKTtcclxuXHQjI2N1YmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtjb2xvcjogTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmfSk7XHJcblx0Y3ViZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe30pO1xyXG5cdGN1YmVNYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XHJcblx0Y3ViZSA9IG5ldyBUSFJFRS5NZXNoKGN1YmVHZW9tZXRyeSwgY3ViZU1hdGVyaWFsKTtcclxuXHRjdWJlLnZpc2libGUgPSBmYWxzZVxyXG5cdGNvbnNvbGUubG9nIGN1YmVcclxuXHRzY2VuZS5hZGQoY3ViZSk7XHJcblxyXG5cdGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgzMCwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgMTAwMClcclxuXHRjYW1lcmEucG9zaXRpb24ueCA9IDEwMFxyXG5cdGNhbWVyYS5wb3NpdGlvbi55ID0gOTBcclxuXHRjYW1lcmEucG9zaXRpb24ueiA9IDkwXHJcblx0Y2FtZXJhLmxvb2tBdChzY2VuZS5wb3NpdGlvbilcclxuXHJcblx0cmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcigpXHJcblx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihuZXcgVEhSRUUuQ29sb3IoMHhFRUVFRUUpKVxyXG5cdHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcclxuXHJcblx0YXhlcyA9IG5ldyBUSFJFRS5BeGlzSGVscGVyKCAxMDAgKVxyXG5cdHNjZW5lLmFkZChheGVzKVxyXG5cclxuXHQjI2NyZWF0ZUVsZW1lbnRzKClcclxuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJXZWJHTC1vdXRwdXRcIikuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcclxuXHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSwgZmFsc2UgKVxyXG5cclxuXHRvcmJpdCA9IG5ldyBUSFJFRS5PcmJpdENvbnRyb2xzKGNhbWVyYSlcclxuXHJcblx0cmVuZGVyKClcclxuXHRyZXR1cm5cclxuXHJcbmNyZWF0ZUVsZW1lbnRzID0gKCktPlxyXG5cdGsgPSAxXHJcblx0d2hpbGUgayA8PSBudW1cclxuXHRcdCMjI1xyXG5cdFx0eCA9IE1hdGgucmFuZG9tKCkgKiAobGVuZ3RoICsgbnVtICsgMzApXHJcblx0XHR5ID0gTWF0aC5yYW5kb20oKSAqIChsZW5ndGggKyBudW0gKyAzMClcclxuXHRcdHogPSBNYXRoLnJhbmRvbSgpICogKGxlbmd0aCArIG51bSArIDMwKVxyXG5cdFx0IyMjXHJcblx0XHR4ID0gMFxyXG5cdFx0eSA9IDBcclxuXHRcdHogPSAwXHJcblx0XHRjcmVhdGVCb3ggeCwgeSwgelxyXG5cclxuXHRcdGNyZWF0ZUJveCh4LCB5LCB6KyhsZW5ndGgqayoxLjUpKVxyXG5cdFx0Y3JlYXRlQm94KHgsIHksIC0oeisobGVuZ3RoKmsqMS41KSkpXHJcblxyXG5cdFx0IyMjY3JlYXRlQm94KC14LCAteSwgLXopXHJcblx0XHRjcmVhdGVCb3goeCwgLXksIC16KVxyXG5cdFx0Y3JlYXRlQm94KC14LCB5LCAteilcclxuXHRcdGNyZWF0ZUJveCgteCwgLXksIHopXHJcblxyXG5cdFx0Y3JlYXRlQm94KHgsIHksIC16KVxyXG5cdFx0Y3JlYXRlQm94KHgsIC15LCB6KVxyXG5cdFx0Y3JlYXRlQm94KC14LCB5LCB6KSMjI1xyXG5cdFx0aysrXHJcblxyXG5cdGkgPSAwXHJcblx0d2hpbGUgaSA8IGFyckxpbmVzLmxlbmd0aFxyXG5cdFx0c2NlbmUuYWRkKGFyckxpbmVzW2ldKVxyXG5cdFx0aSsrXHJcblxyXG5cdGogPSAwXHJcblx0d2hpbGUgaiA8IGFyclBvaW50cy5sZW5ndGhcclxuXHRcdHNjZW5lLmFkZChhcnJQb2ludHNbal0pXHJcblx0XHRqKytcclxuXHRyZXR1cm5cclxuXHJcbmNyZWF0ZUJveCA9ICh4LHkseikgLT5cclxuXHJcblx0bGluZU1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4MDAwMDAwIH0pXHJcblxyXG5cdGxpbmVHZW9tZXRyaWVzID0ge1xyXG5cclxuXHRcdDE6eyAxOnt4OngrbGVuZ3RoLzIseTp5K2xlbmd0aC8yLHo6ei1sZW5ndGgvMn0sIDI6e3g6eCtsZW5ndGgvMix5OnkrbGVuZ3RoLzIsejp6K2xlbmd0aC8yfSB9LFxyXG5cdFx0Mjp7IDE6e3g6eCtsZW5ndGgvMix5OnkrbGVuZ3RoLzIsejp6LWxlbmd0aC8yfSwgMjp7eDp4LWxlbmd0aC8yLHk6eStsZW5ndGgvMix6OnotbGVuZ3RoLzJ9IH0sXHJcblx0XHQzOnsgMTp7eDp4K2xlbmd0aC8yLHk6eStsZW5ndGgvMix6OnotbGVuZ3RoLzJ9LCAyOnt4OngrbGVuZ3RoLzIseTp5LWxlbmd0aC8yLHo6ei1sZW5ndGgvMn0gfSxcclxuXHJcblx0XHQ0OnsgMTp7eDp4LWxlbmd0aC8yLHk6eS1sZW5ndGgvMix6OnotbGVuZ3RoLzJ9LCAyOnt4OngrbGVuZ3RoLzIseTp5LWxlbmd0aC8yLHo6ei1sZW5ndGgvMn0gfSxcclxuXHRcdDU6eyAxOnt4OngtbGVuZ3RoLzIseTp5LWxlbmd0aC8yLHo6ei1sZW5ndGgvMn0sIDI6e3g6eC1sZW5ndGgvMix5OnkrbGVuZ3RoLzIsejp6LWxlbmd0aC8yfSB9LFxyXG5cdFx0Njp7IDE6e3g6eC1sZW5ndGgvMix5OnktbGVuZ3RoLzIsejp6LWxlbmd0aC8yfSwgMjp7eDp4LWxlbmd0aC8yLHk6eS1sZW5ndGgvMix6OnorbGVuZ3RoLzJ9IH1cclxuXHJcblx0XHQ3OnsgMTp7eDp4LWxlbmd0aC8yLHk6eStsZW5ndGgvMix6OnorbGVuZ3RoLzJ9LCAyOnt4OngrbGVuZ3RoLzIseTp5K2xlbmd0aC8yLHo6eitsZW5ndGgvMn0gfSxcclxuXHRcdDg6eyAxOnt4OngtbGVuZ3RoLzIseTp5K2xlbmd0aC8yLHo6eitsZW5ndGgvMn0sIDI6e3g6eC1sZW5ndGgvMix5OnktbGVuZ3RoLzIsejp6K2xlbmd0aC8yfSB9LFxyXG5cdFx0OTp7IDE6e3g6eC1sZW5ndGgvMix5OnkrbGVuZ3RoLzIsejp6K2xlbmd0aC8yfSwgMjp7eDp4LWxlbmd0aC8yLHk6eStsZW5ndGgvMix6OnotbGVuZ3RoLzJ9IH1cclxuXHJcblx0XHQxMDp7IDE6e3g6eCtsZW5ndGgvMix5OnktbGVuZ3RoLzIsejp6K2xlbmd0aC8yfSwgMjp7eDp4LWxlbmd0aC8yLHk6eS1sZW5ndGgvMix6OnorbGVuZ3RoLzJ9IH0sXHJcblx0XHQxMTp7IDE6e3g6eCtsZW5ndGgvMix5OnktbGVuZ3RoLzIsejp6K2xlbmd0aC8yfSwgMjp7eDp4K2xlbmd0aC8yLHk6eStsZW5ndGgvMix6OnorbGVuZ3RoLzJ9IH0sXHJcblx0XHQxMjp7IDE6e3g6eCtsZW5ndGgvMix5OnktbGVuZ3RoLzIsejp6K2xlbmd0aC8yfSwgMjp7eDp4K2xlbmd0aC8yLHk6eS1sZW5ndGgvMix6OnotbGVuZ3RoLzJ9IH1cclxuXHR9XHJcblxyXG5cdGkgPSAxXHJcblx0d2hpbGUgaSA8PSAxMlxyXG5cdFx0bGluZUNvb3JkcyA9IGxpbmVHZW9tZXRyaWVzW2ldXHJcblx0XHRsaW5lR2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKVxyXG5cdFx0bGluZUdlb21ldHJ5LnZlcnRpY2VzLnB1c2goXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCBsaW5lQ29vcmRzWzFdLngsIGxpbmVDb29yZHNbMV0ueSwgbGluZUNvb3Jkc1sxXS56ICksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCBsaW5lQ29vcmRzWzJdLngsIGxpbmVDb29yZHNbMl0ueSwgbGluZUNvb3Jkc1syXS56IClcclxuXHRcdClcclxuXHRcdGxpbmUgPSBuZXcgVEhSRUUuTGluZSggbGluZUdlb21ldHJ5LCBsaW5lTWF0ZXJpYWwgKVxyXG5cclxuXHRcdGFyckxpbmVzLnB1c2goIGxpbmUgKVxyXG5cdFx0aSsrXHJcblx0Y3JlYXRlUG9pbnRzKHgseSx6KVxyXG5cclxuXHJcbmNyZWF0ZVBvaW50cyA9ICh4LHkseiktPlxyXG5cclxuXHRvYmpQb2ludCA9IHtcclxuXHRcdDE6IHt4OngtbGVuZ3RoLzIseTp5LWxlbmd0aC8yLHo6ei1sZW5ndGgvMixjb2xvcjoweGMwZjUxNX0sXHJcblx0XHQyOiB7eDp4K2xlbmd0aC8yLHk6eStsZW5ndGgvMix6OnorbGVuZ3RoLzIsY29sb3I6MHg4ZDY3OTZ9LFxyXG5cdFx0Mzoge3g6eCtsZW5ndGgvMix5OnktbGVuZ3RoLzIsejp6LWxlbmd0aC8yLGNvbG9yOjB4ZGQxNjAwfSxcclxuXHRcdDQ6IHt4OngtbGVuZ3RoLzIseTp5K2xlbmd0aC8yLHo6ei1sZW5ndGgvMixjb2xvcjoweDFjMWFhOX0sXHJcblx0XHQ1OiB7eDp4LWxlbmd0aC8yLHk6eS1sZW5ndGgvMix6OnorbGVuZ3RoLzIsY29sb3I6MHg2ZTQwMGF9LFxyXG5cdFx0Njoge3g6eCtsZW5ndGgvMix5OnkrbGVuZ3RoLzIsejp6LWxlbmd0aC8yLGNvbG9yOjB4NWYyYzRmfSxcclxuXHRcdDc6IHt4OngtbGVuZ3RoLzIseTp5K2xlbmd0aC8yLHo6eitsZW5ndGgvMixjb2xvcjoweDgyZDQ4MX0sXHJcblx0XHQ4OiB7eDp4K2xlbmd0aC8yLHk6eS1sZW5ndGgvMix6OnorbGVuZ3RoLzIsY29sb3I6MHg0NjE3M2R9XHJcblx0fTtcclxuXHJcblx0cG9pbnRHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSggcmFkaXVzIClcclxuXHRpID0gMVxyXG5cdHdoaWxlIGkgPD0gOFxyXG5cdFx0cG9pbnRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiBvYmpQb2ludFtpXS5jb2xvcn0gKVxyXG5cclxuXHRcdHBvaW50ID0gbmV3IFRIUkVFLk1lc2goIHBvaW50R2VvbWV0cnksIHBvaW50TWF0ZXJpYWwgKVxyXG5cdFx0cG9pbnQucG9zaXRpb24ueCA9IG9ialBvaW50W2ldLnhcclxuXHRcdHBvaW50LnBvc2l0aW9uLnkgPSBvYmpQb2ludFtpXS55XHJcblx0XHRwb2ludC5wb3NpdGlvbi56ID0gb2JqUG9pbnRbaV0uelxyXG5cclxuXHRcdGFyclBvaW50cy5wdXNoKHBvaW50KVxyXG5cdFx0aSsrXHJcblxyXG5cdHJldHVyblxyXG5cclxuZG9jdW1lbnQub25tb3VzZWRvd24gPSAoZXZlbnQpLT5cclxuXHJcblx0bW91c2VfeCA9ICggZXZlbnQuY2xpZW50WCAvIHdpbmRvdy5pbm5lcldpZHRoICkgKiAyIC0gMTtcclxuXHRtb3VzZV95ID0gLSggZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCApICogMiArIDE7XHJcblxyXG5cdHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKG1vdXNlX3gsIG1vdXNlX3ksIDAuNSk7XHJcblxyXG5cdHZlY3Rvci51bnByb2plY3QoY2FtZXJhKTtcclxuXHJcblx0cmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcihjYW1lcmEucG9zaXRpb24sIHZlY3Rvci5zdWIoY2FtZXJhLnBvc2l0aW9uKS5ub3JtYWxpemUoKSk7XHJcblxyXG5cdGludGVyc2VjdHMgPSByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyhhcnJQb2ludHMpO1xyXG5cclxuXHRpZiBpbnRlcnNlY3RzLmxlbmd0aCA+IDBcclxuXHJcblx0XHRvcmJpdC5lbmFibGVkID0gZmFsc2VcclxuXHRcdHNlbGVjdGVkT2JqZWN0ID0gaW50ZXJzZWN0c1swXS5vYmplY3RcclxuXHRcdHBvc2l0aW9uID0gc2VsZWN0ZWRPYmplY3QucG9zaXRpb25cclxuXHJcblx0XHRpID0gMFxyXG5cdFx0d2hpbGUgaSA8IGFyckxpbmVzLmxlbmd0aFxyXG5cdFx0XHRqID0gMFxyXG5cdFx0XHR3aGlsZSBqIDwgMlxyXG5cdFx0XHRcdGlmIHBvc2l0aW9uLnggPT0gYXJyTGluZXNbaV0uZ2VvbWV0cnkudmVydGljZXNbal0ueCAmJiBwb3NpdGlvbi55ID09IGFyckxpbmVzW2ldLmdlb21ldHJ5LnZlcnRpY2VzW2pdLnkgJiYgcG9zaXRpb24ueiA9PSBhcnJMaW5lc1tpXS5nZW9tZXRyeS52ZXJ0aWNlc1tqXS56XHJcblx0XHRcdFx0XHRhcnJMaW5lc1tpXS5tYXRlcmlhbCA9IHNlbGVjdGVkT2JqZWN0Lm1hdGVyaWFsXHJcblx0XHRcdFx0aisrXHJcblx0XHRcdGkrK1xyXG5cdHJldHVyblxyXG5cclxuZG9jdW1lbnQub25tb3VzZXVwID0gKCktPlxyXG5cdG9yYml0LmVuYWJsZWQgPSB0cnVlXHJcblx0c2VsZWN0ZWRPYmplY3QgPSBudWxsXHJcblxyXG5yZW5kZXIgPSAoKS0+XHJcblx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpXHJcblx0b3JiaXQudXBkYXRlKClcclxuXHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKVxyXG5cdHJldHVyblxyXG5cclxub25XaW5kb3dSZXNpemUgPSAoKSAtPlxyXG5cdGNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cdHJlbmRlcmVyLnNldFNpemUoIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQgKTtcclxuXHRyZXR1cm5cclxuXHJcbndpbmRvdy5vbmxvYWQgPSBpbml0OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
